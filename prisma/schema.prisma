generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String?
  email         String    @unique
  nickname      String?
  password      String?
  emailVerified DateTime?
  image         String?
  hasOnboarded  Boolean   @default(false)
  phoneNumber   String?   @unique
  reminderType  String    @default("email")
  reminderTime  String    @default("09:00")
  timezone      String?

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  sessions            Session[]
  verificationOTPs    VerificationOTP[]
  resetPasswordTokens ResetPasswordToken[]
  magicLinkTokens     MagicLinkToken[]
  groupMembers        GroupMember[]
  groupInvites        GroupInvite[]        @relation("GroupInvites")
  EventAttendee       EventAttendee[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  reason    String   @default("resend")
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp])
  @@map("verification_otps")
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("reset_password_tokens")
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("magic_link_tokens")
}

model RateLimitCounter {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
  @@map("rate_limit_counters")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members GroupMember[]
  events  Event[]
  invites GroupInvite[]

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String
  joinedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model GroupInvite {
  id        String   @id @default(cuid())
  groupId   String
  email     String
  invitedBy String
  token     String   @unique
  status    String   @default("pending") // pending, accepted, expired, cancelled
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter User  @relation("GroupInvites", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([groupId, email])
  @@index([token])
  @@index([email])
  @@map("group_invites")
}

model Event {
  id          String          @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String?
  createdBy   String
  groupId     String?
  group       Group?          @relation(fields: [groupId], references: [id])
  inviteLink  String?
  attendees   EventAttendee[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("events")
}

model EventAttendee {
  id                String    @id @default(cuid())
  eventId           String
  event             Event     @relation(fields: [eventId], references: [id])
  userId            String
  status            String?
  invitedAt         DateTime  @default(now())
  respondedAt       DateTime?
  lastReminderSent  DateTime?
  user              User      @relation(fields: [userId], references: [id])
}
