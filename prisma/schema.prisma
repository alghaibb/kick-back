generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                   String               @id @default(cuid())
  firstName            String
  lastName             String?
  originalFirstName    String?
  originalLastName     String?
  email                String               @unique
  nickname             String?
  password             String?
  emailVerified        DateTime?
  image                String?
  hasOnboarded         Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  deletedAt            DateTime?
  permanentlyDeletedAt DateTime?
  phoneNumber          String?              @unique
  reminderTime         String               @default("09:00")
  reminderType         String               @default("email")
  timezone             String?
  notificationOptIn    Boolean              @default(true)
  inAppNotifications   Boolean              @default(true)
  pushNotifications    Boolean              @default(false)
  dashboardBackground  String?
  role                 UserRole             @default(USER)
  accounts             Account[]
  CommentReaction      CommentReaction[]
  EventAttendee        EventAttendee[]
  eventComments        EventComment[]
  photoLikes           EventPhotoLike[]
  eventPhotos          EventPhoto[]
  groupInvites         GroupInvite[]        @relation("GroupInvites")
  groupMembers         GroupMember[]
  magicLinkTokens      MagicLinkToken[]
  notifications        Notification[]
  pushSubscriptions    PushSubscription[]
  resetPasswordTokens  ResetPasswordToken[]
  sessions             Session[]
  verificationOTPs     VerificationOTP[]
  contacts             Contact[]
  eventInvites         EventInvite[]        @relation("EventInvites")
  eventTemplates       EventTemplate[]
  EventPoll            EventPoll[]
  EventPollOption      EventPollOption[]
  EventPollVote        EventPollVote[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  reason    String   @default("resend")
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp])
  @@map("verification_otps")
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("reset_password_tokens")
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("magic_link_tokens")
}

model RateLimitCounter {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
  @@map("rate_limit_counters")
}

model Group {
  id          String          @id @default(cuid())
  name        String
  description String?
  image       String?
  createdBy   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  events      Event[]
  invites     GroupInvite[]
  members     GroupMember[]
  templates   EventTemplate[]

  @@index([createdBy])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId])
  @@map("group_members")
}

model GroupInvite {
  id        String   @id @default(cuid())
  groupId   String
  email     String
  invitedBy String
  token     String   @unique
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("member")
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter   User     @relation("GroupInvites", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([groupId, email])
  @@index([token])
  @@index([email])
  @@map("group_invites")
}

model Event {
  id          String          @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String?
  latitude    Float?
  longitude   Float?
  createdBy   String
  groupId     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  inviteLink  String?
  attendees   EventAttendee[]
  comments    EventComment[]
  photos      EventPhoto[]
  group       Group?          @relation(fields: [groupId], references: [id])
  EventInvite EventInvite[]
  EventPoll   EventPoll[]

  @@index([createdBy])
  @@index([date])
  @@index([groupId])
  @@index([date, createdBy])
  @@index([groupId, date])
  @@map("events")
}

model EventAttendee {
  id               String    @id @default(cuid())
  eventId          String
  userId           String
  status           String?
  rsvpStatus       String    @default("pending")
  rsvpAt           DateTime?
  invitedAt        DateTime  @default(now())
  respondedAt      DateTime?
  lastReminderSent DateTime?
  event            Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([eventId])
  @@index([rsvpStatus])
  @@index([userId, rsvpStatus])
  @@index([lastReminderSent])
  @@map("event_attendees")
}

model EventComment {
  id        String            @id @default(cuid())
  content   String
  eventId   String
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  editedAt  DateTime?
  imageUrl  String?
  parentId  String?
  reactions CommentReaction[]
  event     Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  parent    EventComment?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   EventComment[]    @relation("CommentReplies")
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@index([parentId])
  @@index([eventId, createdAt])
  @@index([eventId, parentId])
  @@map("event_comments")
}

model CommentReaction {
  id        String       @id @default(cuid())
  commentId String
  userId    String
  emoji     String
  createdAt DateTime     @default(now())
  comment   EventComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji])
  @@index([commentId])
  @@index([userId])
  @@map("comment_reactions")
}

model EventInvite {
  id        String   @id @default(cuid())
  eventId   String
  email     String
  invitedBy String
  token     String   @unique
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  inviter   User     @relation("EventInvites", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
  @@index([token])
  @@index([email])
  @@map("event_invites")
}

model EventPhoto {
  id        String           @id @default(cuid())
  eventId   String
  userId    String
  imageUrl  String
  caption   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  likes     EventPhotoLike[]
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@index([eventId, createdAt])
  @@map("event_photos")
}

model EventPhotoLike {
  id        String     @id @default(cuid())
  photoId   String
  userId    String
  createdAt DateTime   @default(now())
  photo     EventPhoto @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([photoId, userId])
  @@index([photoId])
  @@index([userId])
  @@map("event_photo_likes")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([userId, createdAt])
  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("push_subscriptions")
}

enum NotificationType {
  GROUP_INVITE
  EVENT_INVITE
  EVENT_REMINDER
  EVENT_COMMENT
  EVENT_PHOTO
  EVENT_CREATED
  EVENT_UPDATED
  GROUP_EVENT_CREATED
  RSVP_UPDATE
  COMMENT_REPLY
  COMMENT_REACTION
}

enum UserRole {
  USER
  ADMIN
}

model EventPoll {
  id        String            @id @default(cuid())
  eventId   String
  status    String            @default("open")
  createdBy String
  createdAt DateTime          @default(now())
  closedAt  DateTime?
  event     Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  creator   User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  options   EventPollOption[]
  votes     EventPollVote[]

  @@index([eventId, status])
  @@map("event_polls")
}

model EventPollOption {
  id               String          @id @default(cuid())
  pollId           String
  label            String
  addressFormatted String
  latitude         Float?
  longitude        Float?
  dedupeKey        String
  suggestedBy      String
  createdAt        DateTime        @default(now())
  poll             EventPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  suggester        User            @relation(fields: [suggestedBy], references: [id], onDelete: Cascade)
  votes            EventPollVote[]

  @@unique([pollId, dedupeKey])
  @@index([pollId])
  @@map("event_poll_options")
}

model EventPollVote {
  id        String          @id @default(cuid())
  pollId    String
  optionId  String
  userId    String
  voteType  String          @default("yes")
  createdAt DateTime        @default(now())
  poll      EventPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    EventPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([optionId, userId])
  @@index([optionId])
  @@index([pollId])
  @@map("event_poll_votes")
}

model Contact {
  id        String    @id @default(cuid())
  firstName String
  lastName  String?
  email     String
  subject   String
  message   String
  userId    String?
  repliedAt DateTime?
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
  @@map("contacts")
}

model EventTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String?
  time        String?
  groupId     String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([createdBy])
  @@index([groupId])
  @@map("event_templates")
}
