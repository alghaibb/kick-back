generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                 String    @id @default(cuid())
  firstName          String
  lastName           String?
  email              String    @unique
  nickname           String?
  password           String?
  emailVerified      DateTime?
  image              String?
  hasOnboarded       Boolean   @default(false)
  phoneNumber        String?   @unique
  reminderType       String    @default("email")
  reminderTime       String    @default("09:00")
  timezone           String?
  notificationOptIn  Boolean   @default(true) // For SMS/Email reminders
  inAppNotifications Boolean   @default(true) // For in-app notifications

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  sessions            Session[]
  verificationOTPs    VerificationOTP[]
  resetPasswordTokens ResetPasswordToken[]
  magicLinkTokens     MagicLinkToken[]
  groupMembers        GroupMember[]
  groupInvites        GroupInvite[]        @relation("GroupInvites")
  EventAttendee       EventAttendee[]
  eventComments       EventComment[]
  eventPhotos         EventPhoto[]
  photoLikes          EventPhotoLike[]
  notifications       Notification[]
  pushSubscriptions   PushSubscription[]
  CommentReaction     CommentReaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  reason    String   @default("resend")
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp])
  @@map("verification_otps")
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("reset_password_tokens")
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("magic_link_tokens")
}

model RateLimitCounter {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
  @@map("rate_limit_counters")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members GroupMember[]
  events  Event[]
  invites GroupInvite[]

  @@index([createdBy])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String
  joinedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId])
  @@map("group_members")
}

model GroupInvite {
  id        String   @id @default(cuid())
  groupId   String
  email     String
  invitedBy String
  role      String   @default("member") 
  token     String   @unique
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter User  @relation("GroupInvites", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([groupId, email])
  @@index([token])
  @@index([email])
  @@map("group_invites")
}

model Event {
  id          String          @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String?
  createdBy   String
  groupId     String?
  group       Group?          @relation(fields: [groupId], references: [id])
  inviteLink  String?
  attendees   EventAttendee[]
  comments    EventComment[]
  photos      EventPhoto[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([createdBy])
  @@index([date])
  @@index([groupId])
  @@index([date, createdBy])
  @@index([groupId, date])
  @@map("events")
}

model EventAttendee {
  id               String    @id @default(cuid())
  eventId          String
  event            Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId           String
  status           String?
  rsvpStatus       String    @default("pending")
  rsvpAt           DateTime?
  invitedAt        DateTime  @default(now())
  respondedAt      DateTime?
  lastReminderSent DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([eventId])
  @@index([rsvpStatus])
  @@index([userId, rsvpStatus])
  @@index([lastReminderSent])
  @@map("event_attendees")
}

model EventComment {
  id        String    @id @default(cuid())
  content   String
  imageUrl  String? // Optional image attachment
  eventId   String
  userId    String
  parentId  String? // For reply threading
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime? // Track when comment was last edited

  event  Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent EventComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)

  // Relations
  replies   EventComment[]    @relation("CommentReplies")
  reactions CommentReaction[]

  @@index([eventId])
  @@index([userId])
  @@index([parentId])
  @@index([eventId, createdAt])
  @@map("event_comments")
}

model CommentReaction {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  emoji     String // Store emoji as string (üëç, ‚ù§Ô∏è, üòÇ, etc.)
  createdAt DateTime @default(now())

  comment EventComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji]) // One reaction per user per emoji per comment
  @@index([commentId])
  @@index([userId])
  @@map("comment_reactions")
}

model EventPhoto {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes EventPhotoLike[]

  @@index([eventId])
  @@index([userId])
  @@index([eventId, createdAt])
  @@map("event_photos")
}

model EventPhotoLike {
  id        String   @id @default(cuid())
  photoId   String
  userId    String
  createdAt DateTime @default(now())

  photo EventPhoto @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([photoId, userId])
  @@index([photoId])
  @@index([userId])
  @@map("event_photo_likes")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data (eventId, groupId, etc.)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([userId, createdAt])
  @@map("notifications")
}

model PushSubscription {
  id       String @id @default(cuid())
  userId   String
  endpoint String @unique
  p256dh   String
  auth     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("push_subscriptions")
}

enum NotificationType {
  GROUP_INVITE
  EVENT_REMINDER
  EVENT_COMMENT
  EVENT_PHOTO
  EVENT_CREATED
  EVENT_UPDATED
  GROUP_EVENT_CREATED
  RSVP_UPDATE
  COMMENT_REPLY
  COMMENT_REACTION
}
